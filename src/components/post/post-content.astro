---
import { type CollectionEntry } from "astro:content";
import Tag from "../tag.astro"; // Make sure this path is correct
import Disqus from "../../components/disqus.astro";

// MDX Components
import A from "../mdx/a.astro";
import Blockquote from "../mdx/blockquote.astro";
import Br from "../mdx/br.astro";
import Del from "../mdx/del.astro";
import Em from "../mdx/em.astro";
import H1 from "../mdx/h1.astro";
import H2 from "../mdx/h2.astro";
import H3 from "../mdx/h3.astro";
import H4 from "../mdx/h4.astro";
import H5 from "../mdx/h5.astro";
import H6 from "../mdx/h6.astro";
import Hr from "../mdx/hr.astro";
import I from "../mdx/i.astro";
import Img from "../mdx/img.astro";
import Input from "../mdx/input.astro";
import Li from "../mdx/li.astro";
import Ol from "../mdx/ol.astro";
import P from "../mdx/p.astro";
import Strong from "../mdx/strong.astro";
import Table from "../mdx/table.astro";
import Td from "../mdx/td.astro";
import Th from "../mdx/th.astro";
import Tr from "../mdx/tr.astro";
import Ul from "../mdx/ul.astro";

type Props = {
  post: CollectionEntry<"blog">;
};

const { post } = Astro.props;
const { Content } = await post.render();
---

<div class="post-content">
  <Content
    components={{
      h1: H1,
      h2: H2,
      h3: H3,
      h4: H4,
      h5: H5,
      h6: H6,
      p: P,
      a: A,
      blockquote: Blockquote,
      img: Img,
      ul: Ul,
      ol: Ol,
      li: Li,
      input: Input,
      table: Table,
      tr: Tr,
      th: Th,
      td: Td,
      strong: Strong,
      em: Em,
      i: I,
      del: Del,
      hr: Hr,
      br: Br,
    }}
  />

  {Array.isArray(post.data.tags) && (
    <div class="meta">
      {post.data.tags
        .filter((tag: string) => tag !== "FranÃ§ais")
        .map((tag: string) => <Tag tag={tag} />)}
    </div>
  )}

  <div style="margin-top: 2rem;">
    <!-- <Disqus /> -->
  </div>
</div>

<style is:inline>
  .post-content img[data-thumbnail="true"] {
    transition: filter 0.3s ease;
  }

  .post-content img[data-thumbnail="true"].is-loading {
    filter: blur(12px);
  }
</style>

<script is:inline>
  if (typeof window !== "undefined") {
    const images = document.querySelectorAll(".post-content img[data-fullsrc]");

    const loadHighRes = (img) => {
      const fullSrc = img.getAttribute("data-fullsrc");
      if (!fullSrc || img.dataset.thumbnailLoaded === "true") {
        return;
      }

      const highRes = new Image();
      highRes.src = fullSrc;
      highRes.decoding = "async";
      highRes.onload = () => {
        img.src = fullSrc;
        img.dataset.thumbnailLoaded = "true";
        img.classList.remove("is-loading");
      };
    };

    if ("IntersectionObserver" in window) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const target = entry.target;
              loadHighRes(target);
              observer.unobserve(target);
            }
          });
        },
        { rootMargin: "200px" },
      );

      images.forEach((img) => {
        img.classList.add("is-loading");
        observer.observe(img);
      });
    } else {
      images.forEach((img) => {
        img.classList.add("is-loading");
        loadHighRes(img);
      });
    }
  }
</script>
